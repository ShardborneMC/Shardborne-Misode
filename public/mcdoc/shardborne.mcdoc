use ::java::data::worldgen::processor_list::ProcessorListRef
use ::java::data::worldgen::template_pool::ElementBase

// Theme
dispatch minecraft:resource[shardborne:dungeon/themes] to struct Theme {
	processor:  #[id="worldgen/processor_list"] string,
	weight: float @ 1..100,
	generation_type: ("maze" | "open_world"),
	biome: #[id(registry="worldgen/biome")] string,
	structures: ThemeStructureEntry,
	theme_settings_id: string
}

struct ThemeStructureEntry {
	[#[id="worldgen/structure"] string]: ThemeStructure
}

struct ThemeStructure {
	min?: int,
	max?: int,
}


// Template Pool
dispatch minecraft:template_pool_element[shardborne:dungeon_pool_element] to struct TemplatePool {
	...ElementBase,
	location: #[id="structure"] string,
	processors: [string],
	allow_overlap?:boolean,
	is_room?:boolean,
	disable_block_replacement?:boolean,
}


// Mob Spawning
dispatch minecraft:resource[shardborne:dungeon/mob_spawning] to [MobSpawningStruct]

struct MobSpawningStruct {
	id:string,
	groups: [GroupStruct],
	max_spawn_cost:int,
	min_spawn_cost:int,
}

struct GroupStruct {
	group_id:string,
	weight: int
}

// Mob Groups
dispatch minecraft:resource[shardborne:dungeon/mob_groups] to struct MobGroup {
	group_name:string,
	spawn_cost:int,
	mobs: [MobDefinition]
}

struct MobDefinition {
	weight:int,
	mob_id: #[id="entity_type"] string,
}

// NPC
dispatch minecraft:resource[shardborne:custom_npc] to struct NPC {
	id: string,
	prerequisites?: [Preqrequisites],
	quests: [Quests] @ 1..,
	random_dialogue: [RandomDialogue] @ 1..
}

struct Preqrequisites {
	type: ("shardborne:questline"|"shardborne:level"),
	...shardborne:prerequisites_type[[type]],
}

enum(string) NPCs {
	Wisp="shardborne:wisp",
	Meld="shardborne:meld",
	Sage="shardborne:sage",
	Juuno="shardborne:juuno",
	Aldhor="shardborne:aldhor",
	Stooch="shardborne:stooch",
}


struct Quests {
	id:string @ 1..,
	npc: NPCs,
	skip_requirements?: boolean,
	finished_dialogue?: [DialogueType],
	initial_dialogue?: [DialogueType],
	requirements: [Requirements] @ 1..,
	satisfied_dialogue?: [DialogueType],
	unsatisfied_dialogue: [DialogueType],
}

dispatch shardborne:prerequisites_type[shardborne:level] to struct LevelRequirement {
	level:int
}
dispatch shardborne:prerequisites_type[shardborne:questline] to struct {
	questlines:[string]
}

struct DialogueType {
	type: ("shardborne:text"|"shardborne:display_item"|"shardborne:give_item"|"shardborne:give_recipe"),
	...shardborne:dialogue_type[[type]],
}

dispatch shardborne:dialogue_type[shardborne:text] to struct {
	text: [string]
}

dispatch shardborne:dialogue_type[shardborne:display_item] to struct {
	text: [string],
	item: ItemStack
}

dispatch shardborne:dialogue_type[shardborne:give_item] to struct {
	item: ItemStack
}

dispatch shardborne:dialogue_type[shardborne:give_recipe] to struct {
	recipe: #[id="recipe"] string
}

struct ItemStack {
	id: string,
	count?: int,
	nbt?: #[nbt=minecraft:item[[item]]] string
}

struct Requirements {
	type: ("shardborne:carry_item"|"shardborne:locate_structure"|"shardborne:make_recipe"|"shardborne:enter_dimension"),
	...shardborne:requirement_type[[type]],
}

dispatch shardborne:requirement_type[shardborne:carry_item, shardborne:make_recipe] to struct {
	item: ItemStack
}

dispatch shardborne:requirement_type[shardborne:locate_structure] to struct {
	structure: (#[id=(registry="worldgen/structure",tags="allowed")] string | [#[id="worldgen/structure"] string]),
}

dispatch shardborne:requirement_type[shardborne:enter_dimension] to struct {
	dimension: #[id="dimension"] string 
}

struct RandomDialogue {
	npc: NPCs,
	initial_dialogue: [DialogueType] @ 1..,
	dialogue: [[DialogueType]] @ 1..
}

// Processors

dispatch minecraft:template_processor[shardborne:spawner_block_processor] to struct {
	spawner_group:string
}

dispatch minecraft:template_processor[shardborne:block_replacement_processor] to struct {
	input_block:#[id="block"] string,
	output_block:#[id="block"] string,
	probability?:float @ 0..1,
}

dispatch minecraft:template_processor[shardborne:foliage_replacement_processor] to struct {
	input_block:#[id="block"] string,
	output_block:#[id="block"] string,
	probability?:float @ 0..1,
}

dispatch minecraft:template_processor[shardborne:dungeon_room_processor] to struct {
	target:#[id="block"] string,
	success_replacement:#[id="block"] string,
	fail_replacement?:#[id="block"] string,
	min_blocks: int,
	max_blocks: int,
	replacement_chance: float @ 0..1,
}

// Loot Conditions

dispatch minecraft:loot_condition[shardborne:dungeon_level] to struct {
	range: LevelRange
}

dispatch minecraft:loot_condition[shardborne:dungeon_category] to struct {
	value: string
}

struct LevelRange {
	min?: int,
	max?: int,
}
